import { ParsedUrlQueryInput } from 'querystring';

import QualysClient, {
  buildQualysClientPaginator,
  QualysApiResponsePaginator,
  QualysClientResponseType,
} from '../QualysClient';
import { ListHostDetectionsReply } from './types.listHostDetections';
import { URL } from 'url';
import { buildRetryOptions } from '../paginationUtil';

export class QualysVmClient {
  constructor(private qualysClient: QualysClient) {}

  listHostDetections(options: {
    /**
     * severity range (e.g. "1-5")
     */
    severities?: string;

    /**
     * Include detailed results?
     */
    show_results: 0 | 1;

    /**
     * If you show_igs (Information); then you will get more than vulns
     * you will get information.
     */
    show_igs: 0 | 1;

    /**
     * truncation limit (e.g. 10)
     */
    truncation_limit: number;
  }): QualysApiResponsePaginator<ListHostDetectionsReply> {
    let limit = options.truncation_limit;
    const { maxAttempts, limitDecrease } = buildRetryOptions({
      limit,
      maxAttempts: 3,
    });

    const buildUrl = () => {
      const query: ParsedUrlQueryInput = {
        action: 'list',
        show_results: options.show_results,
        show_igs: options.show_results,
        truncation_limit: limit,
      };

      if (options.severities) {
        query.severities = options.severities;
      }

      return this.qualysClient.buildRequestUrl({ path, query });
    };

    const path = '/api/2.0/fo/asset/host/vm/detection/';

    const requestName = 'vulnerabilityManagement.listHostDetections';
    return buildQualysClientPaginator<ListHostDetectionsReply>(
      this.qualysClient,
      {
        requestName,
        url: buildUrl(),
        method: 'get',
        maxAttempts,
        logData: { limit },
        responseType: QualysClientResponseType.XML,
        buildPageRequestToRetryAfterTimeout: (context, lastResponse) => {
          const nextUrl = lastResponse
            ? lastResponse.responseData?.HOST_LIST_VM_DETECTION_OUTPUT?.RESPONSE
                ?.WARNING?.URL
            : buildUrl();

          if (!nextUrl) {
            return null;
          }

          limit = Math.max(100, limit - limitDecrease);
          context.logger.warn(
            { limit },
            'Adjusted pagination limit after timeout',
          );

          const urlObj = new URL(nextUrl);
          urlObj.searchParams.set('truncation_limit', limit.toString());

          const url = urlObj.href;
          return {
            url,
            cursor: url,
            lastResponse,
            logData: { limit },
          };
        },
        buildNextPageRequest(context, lastResponse) {
          const nextUrl =
            lastResponse.responseData?.HOST_LIST_VM_DETECTION_OUTPUT?.RESPONSE
              ?.WARNING?.URL;
          return nextUrl
            ? {
                url: nextUrl,
                cursor: nextUrl,
                lastResponse,
                logData: { limit },
              }
            : null;
        },
      },
    );
  }
}
